{
  "name": "codeSnippet",
  "type": "registry:ui",
  "dependencies": ["react-syntax-highlighter", "@types/react-syntax-highlighter --save-dev"],
  "registryDependencies": ["alert-dialog", "button"],
  "files": [
    {
      "path": "ui/codeSnippet/index.tsx",
      "content": "import { Button } from '@/components/ui/button';\nimport { Check, Copy } from 'lucide-react';\nimport { useCallback, useState } from 'react';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport * as PrismStyles from 'react-syntax-highlighter/dist/esm/styles/prism';\n\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger\n} from '@/components/ui/alert-dialog';\n\ntype StyleName = keyof typeof PrismStyles;\n\ntype PropsType =\n  | {\n      codeSnippet: string;\n      styleName: StyleName;\n      showAlert?: false;\n    }\n  | {\n      codeSnippet: string;\n      styleName: StyleName;\n      showAlert: true;\n      alertTitle: string;\n      alertMessage: string;\n      alertDialogAction: string;\n    };\n\nconst CopyCode = ({ codeSnippet }: { codeSnippet: string }) => {\n  const [isCopied, setIsCopied] = useState(false);\n\n  const copyToClipboard = useCallback(() => {\n    navigator.clipboard.writeText(codeSnippet).then(() => {\n      setIsCopied(true);\n      setTimeout(() => setIsCopied(false), 2000);\n    });\n  }, [codeSnippet]);\n\n  return (\n    <Button\n      variant=\"ghost\"\n      size=\"icon\"\n      className=\"absolute top-2 right-2 z-10 bg-primary-foreground\"\n      onClick={copyToClipboard}\n    >\n      {isCopied ? <Check className=\"h-4 w-4\" /> : <Copy className=\"h-4 w-4\" />}\n    </Button>\n  );\n};\n\nconst ShowAlertDialog = (props: PropsType) => {\n  const { showAlert, codeSnippet } = props;\n\n  const copyToClipboard = useCallback(() => {\n    navigator.clipboard.writeText(codeSnippet).then(() => {\n      console.log('Close dialog');\n    });\n  }, [codeSnippet]);\n\n  if (!showAlert) return;\n\n  return (\n    <AlertDialog>\n      <AlertDialogTrigger asChild>\n        <Button\n          variant=\"ghost\"\n          size=\"icon\"\n          className=\"absolute top-2 right-2 z-10 bg-primary-foreground\"\n        >\n          <Copy className=\"h-4 w-4\" />\n        </Button>\n      </AlertDialogTrigger>\n      <AlertDialogContent>\n        <AlertDialogHeader>\n          <AlertDialogTitle>{props.alertTitle}</AlertDialogTitle>\n          <AlertDialogDescription>{props.alertMessage}</AlertDialogDescription>\n        </AlertDialogHeader>\n        <AlertDialogFooter>\n          <AlertDialogCancel>Cancel</AlertDialogCancel>\n          <AlertDialogAction onClick={copyToClipboard}>{props.alertDialogAction}</AlertDialogAction>\n        </AlertDialogFooter>\n      </AlertDialogContent>\n    </AlertDialog>\n  );\n};\n\nexport default function CodeSnippet(props: Readonly<PropsType>) {\n  const { codeSnippet, styleName, showAlert } = props;\n  const style = PrismStyles[styleName];\n\n  return (\n    <div className=\"relative\">\n      {showAlert ? (\n        <ShowAlertDialog\n          codeSnippet={codeSnippet}\n          styleName={styleName}\n          showAlert={showAlert}\n          alertTitle={props.alertTitle}\n          alertMessage={props.alertMessage}\n          alertDialogAction={props.alertDialogAction}\n        />\n      ) : (\n        <CopyCode codeSnippet={codeSnippet} />\n      )}\n\n      <SyntaxHighlighter\n        language=\"typescript\"\n        style={style}\n        wrapLongLines={true}\n        customStyle={{\n          margin: 0,\n          borderRadius: '0.375rem',\n          padding: '1rem'\n        }}\n      >\n        {codeSnippet}\n      </SyntaxHighlighter>\n    </div>\n  );\n}\n",
      "type": "registry:page",
      "target": "components/breeze-ui/codeSnippet.tsx"
    }
  ]
}
