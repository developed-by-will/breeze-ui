{
  "name": "login-01",
  "type": "registry:block",
  "description": "Login 01",
  "dependencies": [
    "react-icons",
    "next-themes"
  ],
  "registryDependencies": [
    "button",
    "card",
    "input",
    "label"
  ],
  "files": [
    {
      "path": "block/login-01/page.tsx",
      "content": "'use client';\r\n\r\nimport LoginPage01 from './components/form';\r\n\r\nexport default function Login() {\r\n  async function signIn() {\r\n    alert('Sign in logic');\r\n  }\r\n\r\n  async function signInWithGoogle() {\r\n    alert('Sign in with Google logic');\r\n  }\r\n\r\n  return (\r\n    <LoginPage01\r\n      customBtnColor=\"bg:background\"\r\n      customLabel=\"Sign In\"\r\n      customIcon=\"\"\r\n      formWidth={300}\r\n      providers={['custom', 'google']}\r\n      handleLogin={[() => signIn(), () => signInWithGoogle()]}\r\n    />\r\n  );\r\n}\r\n",
      "type": "registry:page",
      "target": "app/login-01/page.tsx"
    },
    {
      "path": "block/login-01/components/form.tsx",
      "content": "'use client';\r\n\r\nimport { Button } from '@/components/ui/button';\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardDescription,\r\n  CardFooter,\r\n  CardHeader,\r\n  CardTitle\r\n} from '@/components/ui/card';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Loader2Icon } from 'lucide-react';\r\nimport { useTheme } from 'next-themes';\r\nimport Image, { StaticImageData } from 'next/image';\r\nimport { ReactNode } from 'react';\r\nimport { IconType } from 'react-icons/lib';\r\nimport { providerDetails, ProvidersEnum } from './providerDetails';\r\n\r\n// Check if one of the providers is 'custom'\r\n// If it is then customLabel & customBtnColor are required\r\nexport type LoginPage01Type = {\r\n  backgroundImage?: string | StaticImageData;\r\n  companyLogo?: string | StaticImageData | JSX.Element;\r\n  companyLogoAlternative?: string | StaticImageData | JSX.Element;\r\n  title?: string | JSX.Element;\r\n  description?: string | JSX.Element;\r\n  providers: ProvidersEnum[];\r\n  handleLogin: Array<() => void>;\r\n  formWidth: number;\r\n  loading?: boolean;\r\n} & {\r\n  providers: (ProvidersEnum | 'custom')[];\r\n  customLabel: string;\r\n  customBtnColor: string;\r\n  customIcon: IconType | string | JSX.Element;\r\n} & (\r\n    | { companyLogo?: string | StaticImageData | JSX.Element; companyLogoAlt?: string }\r\n    | {\r\n        companyLogo?: string | StaticImageData | JSX.Element;\r\n        companyLogoAlt?: string;\r\n        companyLogoAlternative?: string | StaticImageData | JSX.Element;\r\n      }\r\n  );\r\n\r\nexport default function LoginPage01(props: Readonly<LoginPage01Type>) {\r\n  const {\r\n    backgroundImage,\r\n    companyLogo,\r\n    companyLogoAlternative,\r\n    title,\r\n    description,\r\n    providers = [],\r\n    handleLogin = [],\r\n    formWidth,\r\n    loading\r\n  } = props;\r\n\r\n  const { theme, systemTheme } = useTheme();\r\n\r\n  // Optional chaining ensures customLabel & customBtnColor are only accessed if defined\r\n  const customLabel = 'customLabel' in props ? props.customLabel : undefined;\r\n  const customBtnColor = 'customBtnColor' in props ? props.customBtnColor : undefined;\r\n  const companyLogoAlt = 'companyLogoAlt' in props ? props.companyLogoAlt : undefined;\r\n  const customIcon = 'customIcon' in props ? props.customIcon : undefined;\r\n\r\n  const currentTheme = theme === 'system' ? systemTheme : theme;\r\n  const logo = currentTheme === 'dark' ? companyLogoAlternative : companyLogo;\r\n\r\n  return (\r\n    <>\r\n      {backgroundImage && (\r\n        <Image\r\n          src={backgroundImage}\r\n          alt=\"Jellydash Login Background\"\r\n          className=\"absolute object-cover\"\r\n          quality={100}\r\n          priority\r\n          fill\r\n        />\r\n      )}\r\n\r\n      <div className=\"relative z-40 pt-8 flex flex-col items-center px-4 sm:mx-auto sm:w-full sm:max-w-md\">\r\n        <div className=\"pt-20\">\r\n          {logo && (typeof logo === 'string' || 'src' in logo) ? (\r\n            <Image\r\n              src={logo}\r\n              alt={companyLogoAlt ?? 'Company Logo'}\r\n              width={formWidth}\r\n              height={100}\r\n            />\r\n          ) : (\r\n            logo\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"relative z-50 mt-8 sm:mx-auto sm:w-full sm:max-w-md\">\r\n        <Card\r\n          className={`flex flex-col border-none backdrop-blur-sm bg-gray-800 bg-opacity-50 shadow sm:rounded-lg px-4 z-10 w-[${formWidth}px]`}\r\n        >\r\n          <CardHeader className=\"flex flex-col items-center\">\r\n            <CardTitle>\r\n              {title && (\r\n                <h2 className=\"mb-6 -mt-1 text-center text-lg font-bold text-neutral-200\">\r\n                  {title}\r\n                </h2>\r\n              )}\r\n            </CardTitle>\r\n            <CardDescription>\r\n              {description && <div className=\"text-colors-neutral-700\">{description}</div>}\r\n            </CardDescription>\r\n          </CardHeader>\r\n          <CardContent className=\"w-full\">\r\n            <div className=\"flex flex-col gap-3\">\r\n              <Input\r\n                id=\"email\"\r\n                placeholder=\"Username\"\r\n                className=\"!bg-gray-700/80 placeholder:text-gray-400 border-gray-500 py-5 text-white\"\r\n              />\r\n\r\n              <Input\r\n                id=\"password\"\r\n                type=\"password\"\r\n                placeholder=\"********\"\r\n                className=\"!bg-gray-700/80 placeholder:text-gray-400 border-gray-500 py-5 text-white\"\r\n              />\r\n            </div>\r\n          </CardContent>\r\n          <CardFooter className=\"flex w-full flex-wrap gap-2 \">\r\n            {providers.map((provider, index) => {\r\n              const { label, icon, background } =\r\n                provider === 'custom'\r\n                  ? {\r\n                      label: customLabel!,\r\n                      icon: customIcon,\r\n                      background: customBtnColor!\r\n                    }\r\n                  : providerDetails[provider];\r\n              const handleClick = handleLogin[index];\r\n\r\n              return (\r\n                <Button\r\n                  key={provider}\r\n                  onClick={handleClick}\r\n                  disabled={loading}\r\n                  className={`inline-flex items-center justify-center font-medium rounded-md focus:outline-none transition ease-in-out duration-150 cursor-pointer disabled:opacity-50 whitespace-nowrap text-white border border-indigo-500 bg-indigo-600 bg-opacity-80 hover:bg-opacity-100 hover:border-indigo-500 focus:border-indigo-700 focus:ring-indigo active:bg-opacity-100 active:border-indigo-700 px-4 py-2 text-sm button-md mt-2 w-full shadow-sm ${background}`}\r\n                >\r\n                  {icon as ReactNode} {label}\r\n                  {loading && <Loader2Icon className=\"animate-spin\" />}\r\n                </Button>\r\n              );\r\n            })}\r\n          </CardFooter>\r\n        </Card>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n",
      "type": "registry:component",
      "target": "app/login-01/components/form.tsx"
    },
    {
      "path": "block/login-01/components/providerDetails.tsx",
      "content": "import { BsDiscord, BsEnvelopeFill, BsFacebook, BsGithub, BsGoogle } from 'react-icons/bs';\r\n\r\n// List of providers\r\nexport type ProvidersEnum = 'google' | 'github' | 'discord' | 'facebook' | 'email' | 'custom';\r\n\r\n// Exclude 'custom' from the list because it is handled separately\r\nexport const providerDetails: Record<\r\n  Exclude<ProvidersEnum, 'custom'>,\r\n  { label: string; icon?: JSX.Element; background: string }\r\n> = {\r\n  google: {\r\n    label: 'Sign in with Google',\r\n    icon: <BsGoogle />,\r\n    background: 'bg-orange-600'\r\n  },\r\n  github: {\r\n    label: 'Sign in with GitHub',\r\n    icon: <BsGithub />,\r\n    background: 'bg-stone-600'\r\n  },\r\n  discord: {\r\n    label: 'Sign in with Discord',\r\n    icon: <BsDiscord />,\r\n    background: 'bg-indigo-600'\r\n  },\r\n  facebook: {\r\n    label: 'Sign in with Facebook',\r\n    icon: <BsFacebook />,\r\n    background: 'bg-blue-600'\r\n  },\r\n  email: {\r\n    label: 'Sign in with Email',\r\n    icon: <BsEnvelopeFill />,\r\n    background: 'bg-emerald-600'\r\n  }\r\n};\r\n",
      "type": "registry:component",
      "target": "app/login-01/components/providerDetails.tsx"
    }
  ]
}