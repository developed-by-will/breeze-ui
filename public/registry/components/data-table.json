{
  "name": "data-table",
  "type": "registry:block",
  "description": "Data Table",
  "dependencies": ["@tanstack/react-table", "lucide-react"],
  "registryDependencies": [
    "checkbox",
    "select",
    "dropdown-menu",
    "table",
    "skeleton",
    "input",
    "button"
  ],
  "files": [
    {
      "path": "block/data-table/data-table.tsx",
      "content": "'use client';\r\n\r\nimport {\r\n  ColumnFiltersState,\r\n  flexRender,\r\n  getCoreRowModel,\r\n  getFilteredRowModel,\r\n  getPaginationRowModel,\r\n  getSortedRowModel,\r\n  SortingState,\r\n  useReactTable,\r\n  VisibilityState\r\n} from '@tanstack/react-table';\r\n\r\nimport { Input } from '@/components/ui/input';\r\nimport { Skeleton } from '@/components/ui/skeleton';\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableHeader,\r\n  TableRow\r\n} from '@/components/ui/table';\r\nimport { useState } from 'react';\r\nimport { DataTablePagination } from './components/pagination';\r\nimport { DataTableViewOptions } from './components/view-options';\r\nimport { DataTableProps } from './types';\r\n\r\nexport function DataTable<TData, TValue>(props: Readonly<DataTableProps<TData, TValue>>) {\r\n  const { columns, data, loading, pagination, filterInput, visibilityToggle } = props;\r\n  const [sorting, setSorting] = useState<SortingState>([]);\r\n  const [columnFilters, setColumnFilters] = useState<ColumnFiltersState>([]);\r\n  const [columnVisibility, setColumnVisibility] = useState<VisibilityState>({});\r\n  const [rowSelection, setRowSelection] = useState({});\r\n  const [globalFilter, setGlobalFilter] = useState('');\r\n\r\n  const table = useReactTable({\r\n    data,\r\n    columns,\r\n    onSortingChange: setSorting,\r\n    onColumnFiltersChange: setColumnFilters,\r\n    getCoreRowModel: getCoreRowModel(),\r\n    getPaginationRowModel: getPaginationRowModel(),\r\n    getSortedRowModel: getSortedRowModel(),\r\n    getFilteredRowModel: getFilteredRowModel(),\r\n    onColumnVisibilityChange: setColumnVisibility,\r\n    onRowSelectionChange: setRowSelection,\r\n    state: {\r\n      sorting,\r\n      columnFilters,\r\n      columnVisibility,\r\n      rowSelection,\r\n      globalFilter\r\n    },\r\n    onGlobalFilterChange: setGlobalFilter\r\n  });\r\n\r\n  if (loading)\r\n    return (\r\n      <div className=\"p-4\">\r\n        <Skeleton className=\"h-96 w-full\" />\r\n      </div>\r\n    );\r\n\r\n  return (\r\n    <div className=\"flex flex-col overflow-hidden border m-4 p-4 gap-4\">\r\n      <div className={`${!filterInput && !visibilityToggle ? 'hidden' : 'flex items-center py-4'}`}>\r\n        {filterInput && (\r\n          <Input\r\n            placeholder=\"Filter data...\"\r\n            value={globalFilter}\r\n            onChange={(event) => setGlobalFilter(event.target.value)}\r\n            className=\"max-w-sm\"\r\n          />\r\n        )}\r\n\r\n        {visibilityToggle && <DataTableViewOptions table={table} />}\r\n      </div>\r\n\r\n      <Table className=\"overflow-hidden\">\r\n        <TableHeader>\r\n          {table.getHeaderGroups().map((headerGroup) => (\r\n            <TableRow key={headerGroup.id}>\r\n              {headerGroup.headers.map((header) => {\r\n                return (\r\n                  <TableHead key={header.id}>\r\n                    {header.isPlaceholder\r\n                      ? null\r\n                      : flexRender(header.column.columnDef.header, header.getContext())}\r\n                  </TableHead>\r\n                );\r\n              })}\r\n            </TableRow>\r\n          ))}\r\n        </TableHeader>\r\n        <TableBody>\r\n          {table.getRowModel().rows?.length ? (\r\n            table.getRowModel().rows.map((row) => (\r\n              <TableRow key={row.id} data-state={row.getIsSelected() && 'selected'}>\r\n                {row.getVisibleCells().map((cell) => (\r\n                  <TableCell key={cell.id}>\r\n                    {flexRender(cell.column.columnDef.cell, cell.getContext())}\r\n                  </TableCell>\r\n                ))}\r\n              </TableRow>\r\n            ))\r\n          ) : (\r\n            <TableRow>\r\n              <TableCell colSpan={columns.length} className=\"h-24 text-center\">\r\n                No results.\r\n              </TableCell>\r\n            </TableRow>\r\n          )}\r\n        </TableBody>\r\n      </Table>\r\n      {pagination && <DataTablePagination table={table} />}\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:component",
      "target": "components/breeze-ui/data-table/data-table.tsx"
    },
    {
      "path": "block/data-table/index.ts",
      "content": "import { DataTableColumnHeader } from './components/column-header';\r\n\r\nexport { DataTableColumnHeader };\r\n",
      "type": "registry:component",
      "target": "components/breeze-ui/data-table/index.ts"
    },
    {
      "path": "block/data-table/types.ts",
      "content": "import { Column, ColumnDef, Table } from '@tanstack/react-table';\r\nimport { HTMLAttributes } from 'react';\r\n\r\nexport type DataTableColumnHeaderProps<TData, TValue> = HTMLAttributes<HTMLDivElement> & {\r\n  column: Column<TData, TValue>;\r\n  title: string;\r\n};\r\n\r\nexport type DropdownMenuItemProps<TData, TValue> = HTMLAttributes<HTMLDivElement> & {\r\n  text: string;\r\n  column: Column<TData, TValue>;\r\n  sort: boolean;\r\n};\r\n\r\nexport type DataTablePaginationProps<TData> = {\r\n  table: Table<TData>;\r\n};\r\n\r\nexport type DataTableProps<TData, TValue> = {\r\n  columns: ColumnDef<TData, TValue>[];\r\n  data: TData[];\r\n  loading?: boolean;\r\n  pagination?: boolean;\r\n  filterInput?: boolean;\r\n  visibilityToggle?: boolean;\r\n};\r\n",
      "type": "registry:component",
      "target": "components/breeze-ui/data-table/types.ts"
    },
    {
      "path": "block/data-table/components/column-header.tsx",
      "content": "import { Button } from '@/components/ui/button';\r\nimport {\r\n  DropdownMenu,\r\n  DropdownMenuContent,\r\n  DropdownMenuItem,\r\n  DropdownMenuSeparator,\r\n  DropdownMenuTrigger\r\n} from '@/components/ui/dropdown-menu';\r\nimport { cn } from '@/lib/utils';\r\n\r\nimport { ArrowDown, ArrowUp, ChevronsUpDown } from 'lucide-react';\r\nimport { DataTableColumnHeaderProps, DropdownMenuItemProps } from '../types';\r\n\r\nconst IconsClassName = 'ml-2 h-4 w-4';\r\nconst DropdownMenuItemClassName = 'mr-2 h-3.5 w-3.5';\r\n\r\nconst DropdownMenuItems = <TData, TValue>(\r\n  props: Readonly<DropdownMenuItemProps<TData, TValue>>\r\n) => {\r\n  const { text, column, sort } = props;\r\n\r\n  return (\r\n    <DropdownMenuItem onClick={() => column.toggleSorting(sort)} className=\"cursor-pointer\">\r\n      {sort ? (\r\n        <ArrowDown className={DropdownMenuItemClassName} />\r\n      ) : (\r\n        <ArrowUp className={DropdownMenuItemClassName} />\r\n      )}\r\n      {text}\r\n    </DropdownMenuItem>\r\n  );\r\n};\r\n\r\nexport function DataTableColumnHeader<TData, TValue>(\r\n  props: Readonly<DataTableColumnHeaderProps<TData, TValue>>\r\n) {\r\n  const { column, title, className } = props;\r\n\r\n  if (!column.getCanSort()) {\r\n    return <div className={cn(className)}>{title}</div>;\r\n  }\r\n\r\n  const sortingIcons = {\r\n    asc: <ArrowUp className={IconsClassName} />,\r\n    desc: <ArrowDown className={IconsClassName} />,\r\n    false: <ChevronsUpDown className={IconsClassName} />\r\n  };\r\n\r\n  const currentSort = column.getIsSorted();\r\n  const icon = sortingIcons[currentSort === false ? 'false' : currentSort];\r\n\r\n  return (\r\n    <div className={cn('flex items-center gap-2', className)}>\r\n      <DropdownMenu>\r\n        <DropdownMenuTrigger asChild>\r\n          <Button variant=\"ghost\" size=\"sm\" className=\"data-[state=open]:bg-accent -ml-3 h-8\">\r\n            <span>{title}</span>\r\n            {icon}\r\n          </Button>\r\n        </DropdownMenuTrigger>\r\n        <DropdownMenuContent align=\"start\">\r\n          <DropdownMenuItems<TData, TValue> text=\"Asc\" column={column} sort={false} />\r\n          <DropdownMenuItems<TData, TValue> text=\"Desc\" column={column} sort={true} />\r\n          <DropdownMenuSeparator />\r\n        </DropdownMenuContent>\r\n      </DropdownMenu>\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:component",
      "target": "components/breeze-ui/data-table/components/column-header.tsx"
    },
    {
      "path": "block/data-table/components/pagination.tsx",
      "content": "import { Button } from '@/components/ui/button';\r\nimport {\r\n  Select,\r\n  SelectContent,\r\n  SelectItem,\r\n  SelectTrigger,\r\n  SelectValue\r\n} from '@/components/ui/select';\r\nimport { ChevronLeft, ChevronRight, ChevronsLeft, ChevronsRight } from 'lucide-react';\r\nimport { DataTablePaginationProps } from '../types';\r\n\r\nexport function DataTablePagination<TData>(props: Readonly<DataTablePaginationProps<TData>>) {\r\n  const { table } = props;\r\n\r\n  return (\r\n    <div className=\"flex items-center justify-between px-2\">\r\n      <div className=\"text-muted-foreground flex-1 text-sm\">\r\n        {table.getFilteredSelectedRowModel().rows.length} of{' '}\r\n        {table.getFilteredRowModel().rows.length} row(s) selected.\r\n      </div>\r\n      <div className=\"flex items-center space-x-6 lg:space-x-8\">\r\n        <div className=\"flex items-center space-x-2\">\r\n          <p className=\"text-sm font-medium\">Rows per page</p>\r\n          <Select\r\n            value={`${table.getState().pagination.pageSize}`}\r\n            onValueChange={(value) => {\r\n              table.setPageSize(Number(value));\r\n            }}\r\n          >\r\n            <SelectTrigger className=\"h-8 w-[70px]\">\r\n              <SelectValue placeholder={table.getState().pagination.pageSize} />\r\n            </SelectTrigger>\r\n            <SelectContent side=\"top\">\r\n              {[10, 20, 25, 30, 40, 50].map((pageSize) => (\r\n                <SelectItem key={pageSize} value={`${pageSize}`} className=\"cursor-pointer\">\r\n                  {pageSize}\r\n                </SelectItem>\r\n              ))}\r\n            </SelectContent>\r\n          </Select>\r\n        </div>\r\n        <div className=\"flex w-[100px] items-center justify-center text-sm font-medium\">\r\n          Page {table.getState().pagination.pageIndex + 1} of {table.getPageCount()}\r\n        </div>\r\n        <div className=\"flex items-center space-x-2\">\r\n          <Button\r\n            variant=\"outline\"\r\n            size=\"icon\"\r\n            className=\"hidden size-8 lg:flex\"\r\n            onClick={() => table.setPageIndex(0)}\r\n            disabled={!table.getCanPreviousPage()}\r\n          >\r\n            <span className=\"sr-only\">Go to first page</span>\r\n            <ChevronsLeft />\r\n          </Button>\r\n          <Button\r\n            variant=\"outline\"\r\n            size=\"icon\"\r\n            className=\"size-8\"\r\n            onClick={() => table.previousPage()}\r\n            disabled={!table.getCanPreviousPage()}\r\n          >\r\n            <span className=\"sr-only\">Go to previous page</span>\r\n            <ChevronLeft />\r\n          </Button>\r\n          <Button\r\n            variant=\"outline\"\r\n            size=\"icon\"\r\n            className=\"size-8\"\r\n            onClick={() => table.nextPage()}\r\n            disabled={!table.getCanNextPage()}\r\n          >\r\n            <span className=\"sr-only\">Go to next page</span>\r\n            <ChevronRight />\r\n          </Button>\r\n          <Button\r\n            variant=\"outline\"\r\n            size=\"icon\"\r\n            className=\"hidden size-8 lg:flex\"\r\n            onClick={() => table.setPageIndex(table.getPageCount() - 1)}\r\n            disabled={!table.getCanNextPage()}\r\n          >\r\n            <span className=\"sr-only\">Go to last page</span>\r\n            <ChevronsRight />\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:component",
      "target": "components/breeze-ui/data-table/components/pagination.tsx"
    },
    {
      "path": "block/data-table/components/view-options.tsx",
      "content": "'use client';\r\n\r\nimport { Table } from '@tanstack/react-table';\r\nimport { Settings2 } from 'lucide-react';\r\n\r\nimport { Button } from '@/components/ui/button';\r\nimport {\r\n  DropdownMenu,\r\n  DropdownMenuCheckboxItem,\r\n  DropdownMenuContent,\r\n  DropdownMenuLabel,\r\n  DropdownMenuSeparator,\r\n  DropdownMenuTrigger\r\n} from '@/components/ui/dropdown-menu';\r\n\r\ntype DataTableViewOptionsProps<TData> = {\r\n  table: Table<TData>;\r\n};\r\n\r\nexport function DataTableViewOptions<TData>(props: Readonly<DataTableViewOptionsProps<TData>>) {\r\n  const { table } = props;\r\n\r\n  const columns = table\r\n    .getAllColumns()\r\n    .filter((column) => typeof column.accessorFn !== 'undefined' && column.getCanHide());\r\n  const hiddenColumnsCount = columns.filter((column) => !column.getIsVisible()).length;\r\n  const totalColumnsCount = columns.length;\r\n\r\n  return (\r\n    <DropdownMenu>\r\n      <DropdownMenuTrigger asChild>\r\n        <Button variant=\"outline\" size=\"sm\" className=\"ml-auto hidden h-8 lg:flex\">\r\n          <Settings2 className=\"mr-2 h-4 w-4\" />\r\n          Columns\r\n          {hiddenColumnsCount > 0 ? (\r\n            <span className=\"ml-2 text-muted-foreground\">\r\n              ({hiddenColumnsCount}/{totalColumnsCount} hidden)\r\n            </span>\r\n          ) : (\r\n            <span className=\"ml-2 text-muted-foreground\">All visible</span>\r\n          )}\r\n        </Button>\r\n      </DropdownMenuTrigger>\r\n      <DropdownMenuContent align=\"end\" className=\"w-[150px]\">\r\n        <DropdownMenuLabel>Toggle columns</DropdownMenuLabel>\r\n        <DropdownMenuSeparator />\r\n        {columns.map((column) => (\r\n          <DropdownMenuCheckboxItem\r\n            key={column.id}\r\n            className=\"capitalize cursor-pointer\"\r\n            checked={column.getIsVisible()}\r\n            onCheckedChange={(value) => column.toggleVisibility(!!value)}\r\n          >\r\n            {column.id}\r\n          </DropdownMenuCheckboxItem>\r\n        ))}\r\n      </DropdownMenuContent>\r\n    </DropdownMenu>\r\n  );\r\n}\r\n",
      "type": "registry:component",
      "target": "components/breeze-ui/data-table/components/view-options.tsx"
    }
  ]
}
